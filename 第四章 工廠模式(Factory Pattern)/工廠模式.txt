工廠模式(Factory Pattern)(屬於創建類)


又可分為 

簡單工廠模式:工廠「直接負責管理」所有的產品，利用if else 或 switch case 來判斷，產生產品。又稱為靜態工廠模式


工廠方法模式:工廠提升為一個(抽象的)概念，定義一個「抽象的工廠方法」，實際上產生產生是由「實作工廠概念」的
實體工廠。

抽象工廠模式


管理物件的「建構」，提供專業(這裡指的是工廠方法模式)，管理「一種產品」的生產。
例如BMW工廠，就只負責產生BMW的車子，提供了一種專業，並不會BMW工廠同時也產生Toyota、Nissan
如果套用簡單的工廠模式，就有可能是利用BMW工廠，透過if else 或 switch case來判斷要產生的產品為BMW或Toyota或
Nissan，這樣就不是提供專業，因為並沒有管理「一種產品」而是多種了。

工廠方法將產品的知識「封裝」進入各個實體建立者(ConcreteCreator)。



「工廠方法模式」定義了一個建立物件的介面，但由子類別決定要實體化的類別為何者。
工廠方法讓類別把實體化的動作，交由子類別進行。


工廠方法模式 又有四個角色負責進行

Creator、ConcreteCreator、ConcreteProduct、Product。

Creator: 是一個抽象類別，他實踐所有處理商品的方法，「不實踐」工廠方法(宣告成abstract)
	所有的子類別都必須實踐這個抽象的factoryMethod()方法。

ConcreteCreator:實踐了factoryMethod()方法，以實際製造出產品。

ConcreteCreator負責建立一個或多個具象產品(ConcreteProduct)，只有ConcreteCreator類別知道如何建立這些商品
(呼應到 工廠方法將產品的知識封裝盡了各個ConcreteCreator中)

ConcreteProduct: 所有的產品，必須實踐Product這個共同的介面，如此一來，使用這些產品的時候，就可以利用這個介面
來操作產品，而「不需要知道」真正的產品為何。


注意:「在設計模式中」，所謂的「實踐一個介面」並不一定表示「寫一個類別然後使用implements關鍵字實踐某個Java介面」
「實踐一個介面」泛指「實踐某個父型態」(可以是類別或介面)的某個方法。

<<不應該侷限在Java，設計模式是可以套用在任何程式語言之中的「架構」>>



