命令模式

命令模式將「請求」封裝成物件，以便使用不同的請求、佇列、或者日誌，參數化其他物件。命令模式也支援可復原的作業


抽象命令(Command):定義命令的介面，宣告執行的方法

具體命令(ConcreteCommand):實現要執行的方法，通常是「虛」的實現，通常會有接收者，並呼叫接收者的功能來完成
命令要執行的操作

接收者(Receiver):真正執行命令的物件。任何類別都可能成為一個接收者，只要能實現命令要求實現的相應功能

呼叫者(Invoker):要求命令物件執行請求，通常會持有命令物件，可以持有多個命令物件。這個是客戶端真正觸發命令
並要求命令執行相應操作的地方，也就是說相當於使用命令物件的入口

客戶端(Client):命令由客戶端來建立，並設定命令的接收者


執行流程是這樣的> 客戶端先建立 實體命令(包含了接收者以及動作) 建立 接收者(實體命令需要傳入接收者以便建立
否則實體命令不曉得誰是接收者誰執行命令，建立一個調用者。 執行後 會是 透過調用者的setCommand將命令物件記錄
然後藉由一個方法呼叫此命令物件中的execute方法，此時會使用到此命令物件中的execute然後會透過命令物件的execute
去找到命令物件內部的接收者，並且執行接收者的動作。 對於調用者而言，無須理會命令執行後該怎麼動作，只需要知道
當命令觸發，該找到去替你執行對應操作即可。這就是鬆綁了發送請求以及執行請求這兩個角色。


需要做復原作業的話，在Command介面中 定義一個undo方法，並請各自undo的實作與execute的實作 相反，假設execute
執行開啟的動作，undo就執行關閉動作，反之 執行關閉 就反著 執行開啟，那在調用者中，就建立一個undo的變數
在開關的方法中 用此變數做記錄，才會知道最後記錄的動作是甚麼，才有辦法依最後的動作復原。

需要做巨集命令的時候，只需要將 所需的各個命令物件，用個命令物件陣列 將他綁在一起形成一組命令物件。
然後建立一個巨集命令類別由於他是命令的一種，所以必須也實踐Command介面，也擁有execute以及undo方法
並且內部用一個Command[] 變數記錄，所以要建立起巨集命令時必須傳入Command陣列。
在巨集命令類別中的execute方法，就將此Command陣列依依取得去執行各自的execute方法，這樣就能將命令物件陣列中
的各個命令物件，透過巨集命令存放，並且透過巨集命令依依去呼叫內部的各個命令之execute方法。
且巨集命令是一個命令，所以可以透過調用者的setCommand方法設定。

再來巨集命令中的undo方法，就一樣將內部陣列中的命令物件依依取出並各自執行他們的undo方法。
但這裡請用for迴圈反者取出來執行，例如for(int i=x;i>=0;i--)用遞減的方式反著執行，確保復原作業的正確(不清楚為啥
