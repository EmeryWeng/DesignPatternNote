狀態模式

狀態模式允許物件隨著內在的狀態改變而改變行為，好像物件的類別改變了一樣。

將狀態「封裝」成為獨立的類別，並將動作轉介到目前的狀態。


優點
(1) 封裝了狀態的轉換規則，在狀態模式中可以將狀態的轉換程式碼封裝在環境類或者具體狀態類中，可以對狀態轉換程式碼進行集中管理，
而不是分散在一個個業務方法中。

(2) 將所有與某個狀態有關的行為放到一個類中，只需要注入一個不同的狀態物件即可使環境物件擁有不同的行為。

(3) 允許狀態轉換邏輯與狀態物件合成一體，而不是提供一個巨大的條件語句塊，
狀態模式可以讓我們避免使用龐大的條件語句來將業務方法和狀態轉換程式碼交織在一起。

(4) 可以讓多個環境物件共享一個狀態物件，從而減少系統中物件的個數。

缺點
(1) 狀態模式的使用必然會增加系統中類和物件的個數，導致系統執行開銷增大。
(2) 狀態模式的結構與實現都較為複雜，如果使用不當將導致程式結構和程式碼的混亂，增加系統設計的難度。
(3) 狀態模式對“開閉原則”的支援並不太好，增加新的狀態類需要修改那些負責狀態轉換的原始碼，
否則無法轉換到新增狀態；而且修改某個狀態類的行為也需修改對應類的原始碼。

使用場景
在以下情況下可以考慮使用狀態模式：
(1) 物件的行為依賴於它的狀態（如某些屬性值），狀態的改變將導致行為的變化。
(2) 在程式碼中包含大量與物件狀態有關的條件語句，這些條件語句的出現，會導致程式碼的可維護性和靈活性變差，
不能方便地增加和刪除狀態，並且導致客戶類與類庫之間的耦合增強。
